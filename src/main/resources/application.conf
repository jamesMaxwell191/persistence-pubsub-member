akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
    }
  }

  extensions = ["akka.cluster.pubsub.DistributedPubSub",
    "akka.cluster.metrics.ClusterMetricsExtension"]

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "Douglass-Pro"
      port = 0
    }
  }
  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@Douglass-Pro:2551",
      "akka.tcp://ClusterSystem@Douglass-Pro:2552"
    ]

    sharding {
      remember-entities = on
      journal-plugin-id = "couchbase-journal"
      snapshot-plugin-id = "couchbase-snapshot-store"
      state-store-mode = "persistence"
    }
    pub-sub {
      routing-logic = round-robin
      gossip-interval = 1s
 //     removed-time-to-live = 300s
    }
  }

  akka.cluster.metrics.enabled=off


  persistence {
    journal {
      plugin = "couchbase-journal"
    }
    at-least-once-delivery.rediliver-interval = 600s

    snapshot-store {
      plugin = "couchbase-snapshot-store"
    }
  }

  akka.actor.default-mailbox.stash-capacity=10000
}

couchbase-journal {

  # FQCN of the couchbase journal plugin
  class = "akka.persistence.couchbase.journal.CouchbaseJournal"

  # Whether to allow stale Couchbase data when querying views for persistent actor recovery.
  #
  # For higher throughput cases, depending on your consistency requirements, stale could be set to "ok".
  #
  #   "false" (recommended) - Always update views before querying.
  #   "ok"                  - View might be out of date and update is not automatically triggered.
  #   "update_after"        - View might be out of date and update is triggered when query is complete.
  #
  # After migrating to Couchbase 4, it might make sense to use indexes for recovery, rather than views, hopefully
  # offering higher throughput without affecting consistency.
  #
  stale = "false"

  # Refer to com.couchbase.client.java.PersistTo
  persist-to = "MASTER"

  # Refer to com.couchbase.client.java.ReplicateTo
  replicate-to = "NONE"

  # Couchbase timeout
  timeout = "60 seconds"

  # Couchbase journal bucket
  bucket {
    nodes = ["couchbase://localhost:8091"]
    bucket = "lobby"
    bucket = ${?PERSISTENCE_BUCKET}
    password = ""
    password = ${?PERSISTENCE_PWD}
  }
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.actor.default-dispatcher"

  # Dispatcher for fetching and replaying messages
  replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

  # Max batch size for messages
  max-message-batch-size = 200
}

couchbase-snapshot-store {

  # FQCN of the couchbase snapshot store plugin
  class = "akka.persistence.couchbase.snapshot.CouchbaseSnapshotStore"

  # Whether to allow stale Couchbase data when querying views for persistent actor recovery.
  #
  # For higher throughput cases, depending on your consistency requirements, stale could be set to "ok".
  #
  #   "false" (recommended) - Always update views before querying.
  #   "ok"                  - View might be out of date and update is not automatically triggered.
  #   "update_after"        - View might be out of date and update is triggered when query is complete.
  #
  # After migrating to Couchbase 4, it might make sense to use indexes for recovery, rather than views, hopefully
  # offering higher throughput without affecting consistency.
  #
  stale = "false"

  # Refer to com.couchbase.client.java.PersistTo
  persist-to = "MASTER"

  # Refer to com.couchbase.client.java.ReplicateTo
  replicate-to = "NONE"

  # Couchbase timeout
  timeout = "60 seconds"

  # Couchbase snapshots bucket
  bucket {
    nodes = ["couchbase://localhost:8091"]
    bucket = "lobby"
    bucket = ${?PERSISTENCE_BUCKET}
    password = ""
    password = ${?PERSISTENCE_PWD}
  }

  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
}

couchbase-replay {

  # Whether to allow stale Couchbase data when querying views for persistent actor recovery.
  #
  # For higher throughput cases, depending on your consistency requirements, stale could be set to "ok".
  #
  #   "false" (recommended) - Always update views before querying.
  #   "ok"                  - View might be out of date and update is not automatically triggered.
  #   "update_after"        - View might be out of date and update is triggered when query is complete.
  #
  # After migrating to Couchbase 4, it might make sense to use indexes for recovery, rather than views, hopefully
  # offering higher throughput without affecting consistency.
  #
  stale = "false"

  # Refer to com.couchbase.client.java.PersistTo
  persist-to = "MASTER"

  # Refer to com.couchbase.client.java.ReplicateTo
  replicate-to = "NONE"

  # Couchbase timeout
  timeout = "60 seconds"

  # Couchbase snapshots bucket
  bucket {
    nodes = ["couchbase://localhost:8091"]
    bucket = "lobby"
    bucket = ${?PERSISTENCE_BUCKET}
    password = ""
    password = ${?PERSISTENCE_PWD}
  }

  # Batch size for pagination
  batchSize = "100"

  # Recovery view code, can be customized when needed
  replay-view-code = """
    function (doc, meta) {
      if (doc.dataType === 'journal-messages') {
        var messages = doc.messages;
        for (var i = 0, l = messages.length; i < l; i++) {
          var message = messages[i];
          emit([parseInt(meta.id.substring(17)), message.sequenceNr], message.message);
        }
      }
    }
  """
}
